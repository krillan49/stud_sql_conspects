--                                        Проектирование Базы Данных

-- БД проектируют опираясь на предметную область

-- Предметрая область или домен - ей может являться что угодно с чем мы работаем, например организация со своими правилами, набором товаров, сотрудниками итд

-- Любая БД является моделью, которая отражает смысл некой предметной области с точки зрения данных, которые принадлежат этой предметной области, которыми оперируют люди, что работают в этой предметной области

-- Проблема представления предметной области:
-- Возможное количество моделей, которые мы могли бы создать довольно большое, есть много разных подходов. Но в настоящее время на реальных проектах проектированием БД не занимаются очень углубленно. Наболее важно не проколоться в базовых вещах, потому на этап проектирование не отводится очень много времени, особенно в современных методологиях типа Эджайл. Индустрия во многом пришла к тому что проще работать с предметной областью по ходу разработки и по ходу дела изменять проектные модели, тк начинаем лучше понимать как работает предметная область

-- Логическое проектирование:
-- Основная задача програмного обеспечения это реализовать некую логику. Между объектами в предметной области есть логические взаимосвязи и нам нужно отразить эти взаимосвязи проектируя БД, а так же отразить свойства объектов предметной области, их ограничения итд

-- Проблемы плохого проектирования:
-- 1. Возможность записи невалидных данных
-- 2. Возможность потери информации (нет нужных связей между объектами)
-- 3. Отсутствие необходимой информации (забыли что-то что было нужно)



--                                         Стадии проектирования БД

-- Колличество стадий в резных теориях может быть больше

-- 1. Анализ требований предметной области:
-- a. Составление USE CASES / сценариев использования - для этого нужно понять кто действующие лица/субьекты работающие в предметной области и чего они хотят и какими объектами они оперируют
-- b. Аналитический процесс с участием stakeholders тоесть владельцев или экспертов от предметной области работающих на владельцев - разработчики встречаются с владельцами бизнеса и экспертами домена, которые помогают разобраться разработчикам в предметной области и вместе начинают строить USE CASES, концептуальную схему БД итд
-- с. Концептуальная схема БД - представляет из себя семантическую смысловую сеть взаимосвязанных по определенным правилам понятий и концепций, тоесть мы выделяем сущьности(например заказчик или товар) их атрибуты/свойства и взаимосвязи между сущностями

-- 2. Логическое моделирование данных предметной области - продолжает стадию анализа требований, эта сдадия не обязательно заканчивает анализ требований, который может продолжаться и дальше, особенно при использовании гибких методологиий разработки програмного обеспечения, например Эджаил, когда происходит постоянное исследование предметной области и ее конкретизация
-- a. Детализирует концептуальную модель БД
-- b. Разные источники включают разные компоненты в логическую модель - тоесть существует какоето количество различных мнений о том как должны выглядеть логическая модель
-- c. Полностью описывает все ключи в БД во всех таблицах
-- d. Полностью определяет все типы данных для всех свойств сущьностей, в теории безотносительно конкретной СУБД, но в реальности чаще под конкретную СУБД
-- e. Полностью описывает все логические ограничения - спорный пункт тк сразу описать все логические ограничения очень сложно, тк предметная область познается по ходу проектирования и потому какието логические ограничания возникают в процессе разработки
-- f. Нормализация отношений между таблицами, чаще всего до формы 3НФ, тк чаще всего более высокие формв, например 4НФ и более приводят к избыточной нормализации

-- 3. Физическое проектирование и нормализация
-- a. В терии на этом этапе выбирается конкретная СУБД, хотя в реальности чеще всего она выбрана намного раньше с учетом навыков команды и других обстоятельств
-- b. Определяются типы данных для конкретной СУБД, если на этапе логического моделирования выбирались безотносительно конкретной СУБД
-- c. Определяются индексы для атрибутов требующих большей производительности, это сложная тема и может пройти время предже будет понятны все атрибуты к которым они нужны, в том числе часто они могут быть изменены уже по ходу эксплуатации системы, когда точно будут понятны нагрузки на производительность
-- e. Могут определяться представления (views)
-- f. Определяются ограничения на доступ (security)

-- Так же при проектировании БД не стоит забывать, что о конвенциях наименований, тоесть как мы будеим именовать объекты и прочих стилистических особенностях нужно договориться на этапе проектирования или в конце него, до того как мы начали заниматься реализаций

--                                               ER Diagrams

-- Не обязательно используется особенно в методологии Эджайл

-- ER - Entry Relationship

-- Нужны для визуализации всех описанных выше процессов в виде диаграм содержащих таблицы со всеми отношениями и другими данными, их удобно строить по результатам проектирования.

-- Для их построения существуем много платных инстркментов:
-- MySQL Workbench
-- Oracle SQL Developer Data Modeler
-- pqModeler
-- SQL Power Architect
















--
