--                               Проектирование(design) БД. Предметная область

-- БД проектируют опираясь на предметную область

-- Предметная область или домен - это то с чем/кем мы работаем, например организация со своими правилами, набором товаров, сотрудниками итд

-- Любая БД является моделью, которая отражает смысл некой предметной области с точки зрения данных, которые принадлежат этой предметной области, которыми оперируют люди, что работают с этой предметной областью

-- Проблема представления предметной области:
-- Возможное количество моделей, которые мы могли бы создать довольно большое, есть много разных подходов. Но в настоящее время на реальных проектах проектированием БД не занимаются очень углубленно. Наболее важно не проколоться в базовых вещах, потому на этап проектирование не отводится очень много времени, особенно в современных методологиях типа Аgile/Эджайл(Гибкие методологии разработки - agile software development). Индустрия во многом пришла к тому что проще работать с предметной областью по ходу разработки и по ходу дела изменять проектные модели, тк начинаем лучше понимать как работает эта предметная область

-- Логическое проектирование:
-- Основная задача програмного обеспечения это реализовать некую логику. Между объектами в предметной области есть логические взаимосвязи и нам нужно отразить эти взаимосвязи проектируя БД, а так же отразить свойства объектов предметной области, их ограничения итд

-- Проблемы, что могут возникнуть в результате плохого проектирования:
-- 1. Возможность записи невалидных данных
-- 2. Возможность потери информации (нет нужных связей между объектами)
-- 3. Отсутствие необходимой информации (забыли что-то что было нужно)



--                                         Стадии проектирования БД

-- Колличество стадий в резных теориях может быть больше, чем описано тут

-- 1. Анализ требований предметной области:
-- a. Составление USE CASES / сценариев использования - для этого нужно понять кто действующие лица/субьекты работающие с предметной областью, чего они хотят и какими объектами оперируют
-- b. Аналитический процесс с участием stakeholders(владельцев или экспертов от предметной области). Разработчики встречаются с владельцами бизнеса и экспертами домена, которые помогают разобраться в предметной области и вместе начинают строить USE CASES, концептуальную схему БД итд
-- с. Концептуальная схема БД - представляет из себя семантическую смысловую сеть взаимосвязанных по определенным правилам понятий и концепций, тоесть мы выделяем сущьности(например заказчик или товар) их атрибуты/свойства и взаимосвязи между сущностями

-- 2. Логическое моделирование данных предметной области - продолжает стадию анализа требований, эта сдадия не обязательно заканчивает анализ требований, который может продолжаться и дальше, особенно при использовании гибких методологиий разработки програмного обеспечения(Аgile), когда происходит постоянное исследование предметной области и ее конкретизация
-- a. Детализация концептуальнуй модели БД
-- b. Разные источники включают разные компоненты в логическую модель - тоесть существует какое-то количество различных мнений о том как должны выглядеть логическая модель
-- c. Полное описание все ключи в БД во всех таблицах
-- d. Полное определение всех типов данных для всех свойств сущьностей. В теории это происходит безотносительно конкретной СУБД, но в реальности часто под конкретную СУБД
-- e. Полное описание всех логических ограничений - это спорный пункт, тк сразу описать все логические ограничения очень сложно, тк предметная область познается по ходу проектирования и потому какие-то логические ограничания возникают в процессе разработки
-- f. Нормализация отношений между таблицами, чаще всего до формы 3НФ, тк чаще всего более высокие формы, например 4НФ и более приводят к избыточной нормализации

-- 3. Физическое проектирование и нормализация:
-- a. В теории на этом этапе выбирается конкретная СУБД, хотя в реальности чеще всего она выбрана намного раньше с учетом навыков команды и других обстоятельств
-- b. Определяются типы данных для конкретной СУБД, если на этапе логического моделирования они выбирались безотносительно конкретной СУБД
-- c. Определяются индексы для атрибутов требующих большей производительности. Это сложная тема и может пройти время предже чем будет понятно к каким атрибутам они нужны, часто индексы могут быть изменены уже по ходу эксплуатации системы, когда точно будут понятны нагрузки на производительность
-- e. Могут определяться представления (views)
-- f. Определяются ограничения на доступ (security)

-- Так же при проектировании БД не стоит забывать, что о конвенциях наименований, тоесть как мы будем именовать объекты и прочих стилистических особенностях нужно договориться на этапе проектирования или в конце него, до того как мы начали заниматься реализаций



--                                         Entry Relationship Diagrams

-- Не обязательно используется особенно в методологии Эджайл

-- ER - Entry Relationship

-- Нужны для визуализации всех описанных выше процессов, в виде диаграм, содержащих таблицы со всеми отношениями и другими данными, их удобно строить по результатам проектирования.

-- Для их построения существуем много платных инструментов:
-- MySQL Workbench
-- Oracle SQL Developer Data Modeler
-- pqModeler
-- SQL Power Architect



--                                     Базовые советы по проектированию БД

-- Таблица определяется по тому, какие там есть объекты, события и абстрации. Таблица состоит из колонок/полей, которые представляют собой свойства объекта
-- Значения в каждом поле по отдельности не должны содержать невалидных данных, например в колоке "числа ног собаки" значение не должно превышать 4.
-- Значения в совокупности полей должны быть непротиворечивы, те например если в одном поле есть значение, от которого зависит другое значение, тоесть 1е влияет на 2е, то они не должны друг другу противоречить



--                                    Плохие практики при проектировании БД

-- Общие:
-- 1. Игнорирование нормализации - избыточность данных
-- 2. Отсутствие стандартов именования и стиля кода в проекте
-- 3. Одна таблица для разных по смыслу данных - тк в норме каждая таблица должна отражать ожин объект, а строки это различные состояния этого объекта
-- 4. Наплевательское отношение к актуальности репрезентации данны. Предметная область не статична и может меняться и в процессе разработки нужно учитывать актуальное ее состояние

-- Конкретные:
-- 1. Поле, которое содержит более одной логической части. Например поле full_name, содержащее имя, очество и фамилию, в этом случае нужно завести 3 отдельные поля.
-- 2. Поле содержащее более одного значение, например массив, если в этом нет явной необходимости. Например поле phone_number, содержащее 3 номера телефона, лучше создать 3 разных поля для номера1, номера2 и номера3.
-- 3. Вычисляемое поле, которое не служит для повышения производительности БД. Например поле для зарплаты за все время. Если это не нужно для быстродействия, то вычислительные операции лучше проводить отдельно, а в БД хранить лишь необходимые для этого данные.
-- 4. Неправильно выбранные первичные ключи. Например ИНН или номер телефона, тк они могут устаревать, менять владельца итд
-- 5. Композитных первичных ключей(ключей более чем по одной колонке) стоит избегать, тк это может приводить к деградации производительности
-- 6. В идеале в таблице кроме суррогатного ключа(просто айдишник логически не связанный с данными) должен быть и натуральный(тоесть является частью данных домена). Есть правило - если сложно селектить сроку без знания суррогатного ключа, то нужно пересмотреть проектирование этой таблицы. Натуральный ключ это не обязательно первичный ключ, но он с высокой вероятностью дополнительно определяет уникальность строки и может использоваться для селектов

-- Правила иногда можно нарушать, например если вычислимое поле улучшает производительность - то создаем вычислимое поле
















--
