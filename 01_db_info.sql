--                                               Базы данных. СУБД

-- Базы данных(БД) - это набор фаилов, хранящих взаимосвязаннее данные в структурированном виде.

-- Системы управленя базами данных / Data base menegment systems (СУБД / DBMS) - программные средства для управления данными, они отвечает за поддержку языка БД(например SQL), осуществляет доступ к БД и данным, позволяет их создавать, менять и удалять, обеспечивает безопасность, оптимизацию и т.д.
-- Когда мы вводим запрос (например SQL) то он идет в СУБД, она его обрабатывает, берет данные из БД и выдает нам.

-- Базы данных не принято коммитить в репозитории, тк Гит не понимает 2ичный формат БД и она при изменении будет целиком копироваться каждый коммит.

-- Самым простым видом БД могут быть просто фаилы с данными, например txt, json или xml. А самой простой СУБД - программа создающая эти фаилы, читающая и записывающая данные в них.
-- Проблемы такого подхода:
-- Ограничение по размеру объема данных и скорости работы с большими данными
-- Проблемы с сохранением данных от нескольких пользователей одновременно
-- Сложность настройки ограничений и проверки корректности данных
-- Нет встроенного механизма транзакций



--                                    Виды БД и СУБД по размещению и доступу.

-- 1. Фаил-серверные (Microsoft Access). Считаются устаревшими. БД хранятся централизованно на сервере, а СУБД находится на каждом клиентском компьютере.
-- Плюс - назкая нагрузка на фаил-сервер.
-- Минусы - высокая загрузка локальной сети и невозможность обеспечения хорошей доступности, надежности и безопасности, не может справиться с очень большой нагрузкой.

-- 2. Клиент-серверные (MySQL, PostgreSQL, Oracle, MS SQL, MariaDB). Самые популярные. БД и СУБД располагаются на сервере приложения, а клиентские машины просто получают к ним доступ на отправку запросов.
-- Плюс - вся нагрузка идет на сервер, а сервера имеют возможности высокой производительности и масштабирования. Обесбечивают высокое быстродействие, надежность и безопасность.

-- 3. Встраемые (SQLite). Более легковесные чем клиент-серверные и могут использоваться даже на смартфонах или быть встроенными в отдельные приложения. Не расчитаны на использование по сети и высокие нагрузки.



--                                Виды БД и СУБД по способу хранения и обработки данных.

-- Бывают SQL либо NoSQL(not only).

-- 	1. Key-value базы данных(Redis, Memcached, Etcd) (NoSQL):
-- Key-value БД хранят данные как совокупность пар «ключ-значение», в которых ключ это уникальный id. Ключи и значения могут представлять собой что угодно: от простых до сложных составных объектов.
-- Преимущества: Скорость работы; Простота модели хранения данных; Значения могут быть любыми, включая JSON;
-- Недостатки: Плохо масштабируются в сложных моделях данных; Неэффективность при работе с группой записей (на входе не имеем инфы кроме ключа); Нет языка запросов(логика зпросов будет в основном коде)

-- 2. Документоориентированные базы данных(MongoDB, Couchbase, Firebase) (NoSQL):
-- Хранение и запрос данных в виде документов, подобном JSON. Документ это набор атрибутов(ключ и значение). Значения могут быть любыми типами данных(в том числе и ссылки на другие документы)
-- Позволяет добавлять новую информацию в некоторые записи, не требуя при этом, чтобы все остальные записи в базе данных имели одинаковую структуру
-- Документы в базе данных адресуются с помощью уникального ключа, обычно это строка, которая генерируется автоматически.
-- Помимо простого поиска документов по ключу, они имеют и свой язык запросов. Функционал и синтаксис которого отличается от одной реализации к другой.
-- > db.users.find({"name": "Daniel"}).count()  (пример запроса в MongoDB)

-- 	3. Реляционные базы данных (SQLite, MySQL, PostgreSQL, Oracle, MS SQL, MariaDB) (SQL):
-- Информация хранится в связанных друг с другом таблицах. Таблицы состоят из строк/записей и столбцов/атрибутов



--                                          Транзакционность СУБД. ACID

-- Большинство СУБД являются транзакционными

-- Транзакция - это несколько операций, которые обязательно должны быть вместе сохранены или наоборот, обязательно вместе не сохранены


-- ACID - формальные критерии транзакционных систем:

-- 1. Atomicity (атомарность) - транзакционная система гарантирует, что все операции, в рамках одной транзакции будут или полностью записаны в БД, или если во время трянзакции произошел сбой, то произойдет откат, который приведет БД в состояние как будто этой транзакции не было.
-- Пример: в банке нужно одновременно и списать с одного счета и зачислить на другой счет.

-- 2. Consistency (согласованность) - система гарантирует выполнение тех ограничений и правил, которые мы на нее наложим

-- 3. Isolation (изолированность) - в рамках выполнения одной транзакции, другие транзакции не повлияют на результат ее работы. Транзакция может состоять из нескольких операций и если между ними другая транзакция изменит данные, которые могут повлиять на согласованность данных между разными операциями в 1й транзикции - изолированность гарантирует, что такого не будет и транзакция не будет учитывать изменения в данных, сделанных после начала этой транзакции.
-- Самый строгий вариант изолированности - это выполнение всех транзакций только последовательно оду за другой, соотв следующие ждут своей очереди.
-- Менее строний вариант изолированности, для более нагруженных систем - транзакции могут выполняться параллельно и даже в некоторых случаях влиять на результаты друг друга

-- 4. Durability (прочность) - после того как транзакция была помечена в системе как успешно выполненая, то любые сбои такие как выключение сервера или электричества не приведут к потере дпнных которые были добалены или изменены транзакцией














--
