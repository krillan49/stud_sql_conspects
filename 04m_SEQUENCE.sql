--                                   [ PostgreSQL ]  SEQUENCE / Последовательности

-- Последовательности можно как генерировать, например для автоинкремента при помощи псевдотипа данных SERIAL, синтаксиса GENERATED [ALWAYS / BY DEFAULT] AS IDENTITY, так и работать с ними явным образом, тоесть создавать, изменять и удалять отдельно

-- Создаем последовательность
CREATE SEQUENCE seq; -- seq - название последовательности

-- Функкции для работы с последовательностями:
SELECT nextval('seq'); -- nextval - функция генерирует следующее значение в последовательности, принимает аргументом название последовательности в виде строки, для которой и сгенерирует значение
SELECT currval('seq'); -- currval - функция возвращает текущее значение, принимает имя последовательности
SELECT lastval();      -- lastval - функция возвращает последнее значение сгенерированное последним среди всех последовательностей в текущей сессии, не принимает аргументы
SELECT setval('seq', 10, true); -- setval - функция устанавливающая текущее или следующее сгенерированное значение, принимает имя последовательности, значение которое хотим установить и true(значение по умолчанию, можно не писать, устанавливает текущее значение) или false(устанавливает следующее сгенерированное значение)



--                                        Опции при создании последовательности

-- Создание последовательности с доп опциями:
CREATE SEQUENCE IF NOT EXISTS seq3 -- тк последовательность это объект то лучше использовать IF NOT EXISTS
INCREMENT 16 -- значение на которое будет увеличиваться последовательность при генерации следующего значения. По умолчанию равно 1
MINVALUE 0  -- минимальное значение последовательности.
MAXVALUE 128 -- максимальное значение, если будет превышено выдаст ошибку
START WITH 0 -- начальное значение последовательности, с которого начнется генерация. По умолчанию равно 1



--                                       Изменение и удаление последовательностей

-- ALTER - оператор для изменения последовательности

-- RENAME TO Переименовать последовательность
ALTER SEQUENCE seq3 RENAME TO seq4 -- переименует последовательность seq3 в seq4

-- RESTART WITH Сбросить/откатить последовательность до указанного значения
ALTER SEQUENCE seq4 RESTART WITH 16 -- сбросит последовательность до значения 16
SELECT nextval('seq4');


-- DROP - оператор для удаления последовательности
DROP SEQUENCE seq4;



--                                       Последовательности и таблицы - SERIAL

-- (! SERIAL - этот псевдотип данных устпрел и рекомендуется им пользоваться только на версиях Постгрэ ниже 10й)

-- Тип данных int по умолчанию не обладает свойствами автоинкремента, поэтому можно использовать вместо него псевдотип SERIAL, который использует под капотом SEQUENCE
CREATE TABLE public.book(
  book_id SERIAL NOT NULL,
  title text NOT NULL,
	CONSTRAINT PK_book_book_id PRIMARY KEY(book_id)
);
-- Теперь значения book_id будут автоматически увеличиваться при вставке новых строк



--                                      Явное исполнение подкапотного кода SERIAL

-- Создаем таблицу с обычным int полем для первичного ключа
CREATE TABLE public.book(
  book_id int NOT NULL,
  title text NOT NULL,
	CONSTRAINT PK_book_book_id PRIMARY KEY(book_id)
);

-- Создаем последовательность и назначаем ее при помощи OWNED BY к необходимому полю в нашу таблицу
CREATE SEQUENCE IF NOT EXISTS book_book_id_seq
START WITH 1
OWNED BY book.book_id;

-- Далее нужно значением по умолчанию в необходимую колонку присвоить функцию последовательности nextval от созданной выше последовательности, чтобы она генерировала следующее значение в каждой строке при вставке
ALTER TABLE book
ALTER COLUMN book_id SET DEFAULT nextval('book_book_id_seq');

-- Теперь можем вставлять значения и в поле book_id они будут генерироваться при помощи nextval
INSERT INTO book (title) VALUES ('title'), ('title2'), ('title3');



--                                        Проблемы и ошибки с SERIAL

-- Ошибка ч ручным заполнением PRIMARY KEY/UNIQUE поля:
-- При использовании SERIAL ничто не мешает заполнить поле под ним вручную
INSERT INTO book VALUES (4, 'title4');
-- При этом значение 4 просто вставится без использования функции nextval, соотв значение последовательности не изменится и при следующей вставке уже так
INSERT INTO book VALUES ('title5'); -- возникнет ошибка, тк nextval выдает 4, а оно уже есть и у этой колонки есть ограничение на уникальность значений



--                                     GENERATED [ALWAYS / BY DEFAULT] AS IDENTITY

-- Так же базируется на SEQUENCE. Начиная с 10й версии Постгрэ реколмендуется использовать этот более продвинутый способ создания поля с автоинкрементом. Он избегает множества ошибок возникающих при использовании синтаксиса с псевдотипом SERIAL

-- Создаем таблицу с обычным int полем для первичного ключа и синтаксисом GENERATED [ALWAYS / BY DEFAULT] AS IDENTITY
-- ALWAYS - запрещает по умолчанию явную вставку значения в поле с автоинкрементом
-- BY DEFAULT - разрешает по умолчанию явную вставку значения в поле с автоинкрементом
CREATE TABLE public.book(
  book_id int GENERATED ALWAYS AS IDENTITY NOT NULL,
  title text NOT NULL,
	CONSTRAINT PK_book_book_id PRIMARY KEY(book_id)
);

-- Теперь можем вставлять значения и в поле book_id
INSERT INTO book (title) VALUES ('title'), ('title2'), ('title3');

-- Но если ктото захочет вставить значение поля с автоинкрементом явно
INSERT INTO book VALUES (4, 'title4'); -- тут возникнет ошибка, тоесть такие вставки по умолчанию запрещены
-- Но можно разрешить их прописав доп синтаксис
INSERT INTO book OVERRIDING SYSTEM VALUE VALUES (4, 'title4');


-- Так же в данном синтаксисе мы можем добавлять опции SEQUENCE прямо в строке создания поля:
CREATE TABLE public.book(
  book_id int GENERATED ALWAYS AS IDENTITY (START WITH 10 INCREMENT BY 16) NOT NULL,
  title text NOT NULL,
	CONSTRAINT PK_book_book_id PRIMARY KEY(book_id)
);


-- С этим синтаксисом(в отличие от Сериал) при использовании ALTER TABLE нам не нужно знать имя последовательности, например чтобы сбросить последовательность, можем обращаться просто к имени колонки

-- Так же есть преимущества при работе с доступом












--
