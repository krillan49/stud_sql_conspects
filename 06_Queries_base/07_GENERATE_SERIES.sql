--                                      Генерация столбцов в запросах

-- GENERATE_SERIES(a, b, n) - функция генерирует набор значений и создает из них столбец
-- a - минимальное значение в наборе включительно
-- b - максимальное значение в наборе включительно
-- n - шаг с которым создаются значения от минимального до максимального (для целых числе по умолчанию равен 1)

-- Генерация целочисленных столбцов в блоке SELECT
SELECT GENERATE_SERIES(2, 100) AS nums;        -- Создает столбец чисел от 2х до 100
SELECT GENERATE_SERIES(2, 10, 2) AS nums;      -- 2, 4, 6, 8, 10
SELECT GENERATE_SERIES(9, 7, -1) AS nums;      -- 9, 8, 7. Отрицательный шаг для обратного порядка

-- Генерация столбцов даты и времени. Для задания шага используем интервал
SELECT GENERATE_SERIES('2005-05-24', '2005-06-02', INTERVAL '1 day');
SELECT GENERATE_SERIES('2023-05-08 10:00:00', '2023-05-08 22:00:00', INTERVAL '30 minute');
SELECT GENERATE_SERIES('2024-01-01', '2024-12-31', INTERVAL '1 week') AS time_some;          -- колонка всех начал недель

-- Две сгенерированных колонки создадутся параллельно и не будут дублировать свои значения друг для друга
SELECT
GENERATE_SERIES('2023-07-16 08:00:00', '2023-07-16 17:00:00', INTERVAL '1 hour') AS time_from,
GENERATE_SERIES('2023-07-16 09:00:00', '2023-07-16 18:00:00', INTERVAL '1 hour') AS time_to;

-- Если в запросе выводятся другие столбцы, то значения каждой из строк будут продублированы для каждого значения из GENERATE_SERIES, тоесть это будет аналогично CROSS JOIN с результирующим набором сгенерированного столбца
SELECT product_id, product_name, GENERATE_SERIES(1, quantity_in_stock) AS n FROM products; -- используем для размножения строк в зависимости от цифры в quantity_in_stock



--                                      Генерация стодбца в блоках FROM и JOIN

-- Удобно генерировать столбец в блоке FROM и потом использовать как изначальные данные(аналог таблицы), для запроса
SELECT 0, '-' FROM GENERATE_SERIES(1, 10); -- будет сгенерировано 10 строк с 2мя столбцами во всех из которых 0 и '-'

-- Чтобы использовать сгенерированные значения в соответсвующих им генерирующихся строках, нужно задать псевдоним для генерируемого столбца, под ним будет соответсвующее строке каждое новое сгененрированное значение
SELECT REPEAT('*', 20-n) AS pattern FROM GENERATE_SERIES(1, 10) AS n;   -- рисуем перевернутую призму от 19 до 10 звездочек

-- Чтобы задать псевдоним и генерируемым значениям столбца и результирующему набору, нужно записать 1м псевдоним таблицы и в скобхах псевдоним столбца
SELECT n, FACTORIAL(n) AS f FROM generate_series(1, 5) AS t(n);  -- тут t(n):
-- t - псевдоним таблицы/запроса что будет создан
-- n - имя колонки в запроса, куда будут генерироваться значения


-- Генерация столбца в блоке JOIN
SELECT product_id, product_name, quantity_in_stock
FROM products CROSS JOIN GENERATE_SERIES(1, quantity_in_stock);


-- Генерация в поле FROM при объединении таблиц через запятую.
SELECT year, employees_name, year = employees_year AS same
FROM generate_series(2014, 2023) AS year, employees;



--                                    Применение функций к результату генерации

-- Можно применять функции(в том числе и оконные) к результату генерации. Функция применяется к каждому сгенереному члену
SELECT POWER((GENERATE_SERIES(1, n)), 3) AS m FROM some;
SELECT ARRAY(SELECT * FROM GENERATE_SERIES(2, 10, 2));     -- Генерация и преобразование в массив
















--
