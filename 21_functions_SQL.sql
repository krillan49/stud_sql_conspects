--                                             Функции SQL

-- Функция - это объект, сохраняющийся в БД, принимающий аргументы и возвращающий результат

-- Преимущества SQL-функций:
-- Функции (а так же хранимые процедуры) - компилируемы и хранятся на стороне БД. Поэтому из вызов стоит дешево.
-- Они дают разграничение работы Frontend-девелопера(используют функции) и Server-side-девелопера(пишут функции)
-- Хранить код, который работает с данными(кортежами), логичнее и ближе к данным (согласуется с SRP - принципом распределения обязанностей)
-- Переиспользуемость функция разными клиентскими приложениями, тоесть не нужно их создавать множество раз на языке каждого приложения, что подключено к БД
-- Управление безопасностью через регулирование доступа к функциям
-- Уменьшение трафика на сеть
-- Поощряют модульное программирование. Например если нужна генерация какогото ряда числел в нескольких SQL-crhbgnf[]



--                                             Функции PostgreSQL

-- Состоят из набора утверждений, возвращают результат последнего
-- Могут содержать SELECT, INCERT, UPDATE, DELETE (тоесть CRUD-операции)
-- Не могут содержать COMMIT, SAVEPOINT (TLC), VACUUM (utility), но это не значит что функции не транзакционны, они транзакционны автоматически и секции BEGIN END работают как сэйвпоинты, тоесть все что произошло с ошибкой внутри функции будет автоматически откачено

-- Функции в PostgreSQL делятся на:
-- SQL-функци
-- Процедурные(PL\pgSQL - основной диалект)
-- Серверные функции, написанные на Си
-- Собственные Си-функции



--                                        Синтаксис создания функции

CREATE FUNCTION func_name([arg1, arg2, ...]) RETURNS data_type AS $$
  -- тело функции с какой-то логикой
$$ LANGUAGE lang;
-- arg1, arg2, ...  - Аргументы функции(не обязательны) - переменные с типами данных
-- RETURNS data_type  - указываем тип данных, которые будут возвращены
-- $$ - знак открытия и закрытия тела функции (есть еще способ с кавычками он он хуже, тк придется экранировать кавычки в логике функции, использовались до 8й версии )
-- LANGUAGE lang - указываем язык, либо SQL, либо PL\pgSQL

-- Создает новую функцию или модифицирует уже существующую функцию с этим названием, тоесть заменяет функционал на новый
CREATE OR REPLACE FUNCTION func_name ([arg1, arg2, ...]) RETURNS data_type AS $$
  -- тело функции с какой-то логикой
$$ LANGUAGE lang;


-- Пример простой функции без аргументов, в которой будем pfvtyznm в таблице tmp_customers значения NULL на 'unknown', тк функция только изменяет значения и ничего не возвращает то в RETURNS пишем тип void
CREATE OR REPLACE FUNCTION fix_customer_region() RETURNS void AS $$
	UPDATE tmp_customers
  SET region = 'unknown'
  WHERE region IS NULL
$$ LANGUAGE sql;
-- Чтобы чтобы запустить функцию, нужно вызвать ее оператор, если функция ничего не возвращает как тут, то вернет NULL
SELECT fix_customer_region();



--                                          Скалярные функции


















--
