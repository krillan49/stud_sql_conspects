--                                             Реляционные СУБД

-- Все реляционные СУБД используют язык SQL

-- 	SQLite, MySQL, PostgreSQL, Oracle, MS SQL, MariaDB(форк от MуSQL)

-- Теоретической основой является реляционная алгебра - определяет систему операций над отношениями(на практике это таблицы): объединение, пересечение, вычитание, соединение. Все эти операции на практике выражаются через язык SQL

-- Сущность - (например клиенты, заказы) - описывается строкой таблицы, с набором атрибутов от каждого столбца
-- Таблица - отношение
-- Столбец - атрибут сущности
-- Строка - запись/кортеж
-- Результирующий набор - результат запроса на языке SQL (выведенная по запросу таблица)

-- Информация хранится в связанных друг с другом таблицах. Таблицы состоят из строк/записей и столбцов/атрибутов. Каждый столбец имеет определённый тип данных(пр: VARCHAR INTEGER DATETIME)
-- Ключевое поле/первичный ключ (обязателен, только один но может состоять из нескольких полей) – это поле, значение которого однозначно определяет запись в таблице. С помощью данного правила СУБД не позволит нам создать новую запись, где id будет неуникальным.
-- Внешний ключ (необязателен, может быть несколько) – это поле в одной таблице, которое ссылается на первичный ключ в другой таблице.
-- Таблица с внешним ключом называется дочерней, а таблица с первичным ключом называется ссылочной или родительской (одна таблица может быть и той и другой одновременно).
-- Правило внешнего ключа гарантирует, что при создании записей в дочерней таблице, значение поля, являющегося внешним ключом, есть в родительской таблице.



--                                              SQL: общая инфа

-- https://sql-academy.org/ru/handbook/LENGTH  справочник по функциям MySQL

-- https://habr.com/ru/articles/247373/  про индексы


-- SQL - Structured Query Language (язык структурированных запросов) - язык запросов к СУБД. Он формулирует запрос к БД и на основе запроса производит различные манипуляции внутри БД.

-- SQL это не процедурный язык и не язык общего назначения, те не заточен под работу с потоком исполнения, например при помощи циклов, на нем мы не можем написать программу. И если необходимо реализовать процедурную логику, нужно дополнительно использовать соотв язык(Питон, Руби, Си итд)

-- SQL используется во множестве СУБД. Среди таковых можно выделить: MySQL, SQLite, PostgreSQL, Oracle, Microsoft SQL Server и многие другие.

-- Многие СУБД вносят свои изменения в язык SQL. Такие языки называют диалектами или расширениями языка (T-SQL – диалект Microsoft SQL Server, PL/SQL – диалект Oracle Database, PL/pgSQL – диалект PostgreSQL). Различия в основнолм касаются процедурных расширений

-- ANCI SQL-92   - стандарт SQL, общая часть и основа всех диалектов SQL


-- столбец и поле - алиасы
-- Имена столбцов и таблиц можно для визуального выделения писать в наклонных кавычках ``
-- Название столбца лучше не делать datetime, тк оно часто зарезервировано. Лучше использовать datestamp/date_stamp/DateStamp


-- BigData - это тоже SQL, но позволяют хранить данные на большом количестве машин/компьютеров и использовать их вычислительные мощности



--                                    SQL: основные операторы и типы запросов.

-- 1. операторы определения данных (Data Definition Language, DDL):
-- 	CREATE создаёт объект базы данных (саму базу, таблицу, представление, пользователя и так далее)
-- 	ALTER изменяет объект,
-- 	DROP удаляет объект;

-- 2. операторы манипуляции данными (Data Manipulation Language, DML):
-- 	SELECT выбирает данные, удовлетворяющие заданным условиям,
-- 	INSERT добавляет новые данные,
-- 	UPDATE изменяет существующие данные,
-- 	DELETE удаляет данные;

-- 3. операторы определения прав доступа к данным (Data Control Language, DCL):
-- 	GRANT предоставляет пользователю (группе) разрешения на определённые операции с объектом,
-- 	REVOKE отзывает ранее выданные разрешения,
-- 	DENY задаёт запрет, имеющий приоритет над разрешением;

-- 4. операторы управления транзакциями (Transaction Control Language, TCL). Транзакции рассматривают набор команд как единое целое, обеспецивает целостность связанных данных:
-- 	COMMIT применяет транзакцию,
-- 	ROLLBACK откатывает все изменения, сделанные в контексте текущей транзакции,
-- 	SAVEPOINT делит транзакцию на более мелкие участки.












--
